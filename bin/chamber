-- Now to build a chamber!
--- maybe...
-- need to have it have a customizeable dimension, 
-- so like
-- Have a configurable distance off the hallway, which is where the start will be
-- Dig in the entry tunnel
-- Start digging the room
-- ### H
-- ####H
-- ### H

local args = { ... }

local length
local width
local height
local entryLength

os.loadAPI("shlrm/api/sturtle")
os.loadAPI("shlrm/api/sdig")
os.loadAPI("shlrm/api/scrn")

-- Functions
function clearscreen()
  term.clear()
  scrn.regwrite("CHAMBERBOT", 12, 1)
  scrn.regwrite("Developed by BeepDog", 17,12)
  term.setCursorPos(1,3)
end

-- Primary software begins here
if #args ~= 4 then
  clearscreen()
  print("Need 4 arguments:")
  print("length width height entryLength")
  error("no args")
end

-- dig out the entry tunnel first. It'll be a simple 3 tall by 2 wide thing
-- Expect to start at the bottom left of the entry tunnel
-- End at the bottom left of the entry tunnel
function entryTunnel(theLength)
  local myLength = theLength
  sturtle.refuel(1)
  turtle.up()
  while myLength > 0 do
    myLength = myLength - 1
    sturtle.refuel(1)
    sdig.mineFwd()
    sdig.digUp()
    sdig.digDown()
    turtle.turnRight()

    sdig.mineFwd()
    sdig.digUp()
    sdig.digDown()
    
    turtle.turnLeft()
    turtle.turnLeft()
    sdig.mineFwd()
    turtle.turnRight()
  end

  sturtle.refuel(1)
  turtle.down()
end

function chamberStartPoint(theLength)
  -- Go left this many blocks, and that's our start point
  local left = math.ceil((theLength - 2) / 2)

  sturtle.refuel(1)
  sdig.mineFwd()
  turtle.turnLeft()

  while left > 0 do
    left = left - 1
    sdig.mineFwd()
  end

  -- We're now at our starting point, bottom left of the chamber to mine out (inside it)
  turtle.turnRight()
  sdig.mineDown() -- Actually start one below, it's kind of lame, but whatevz
end

function digChamber(tlength, twidth, theight)
  -- Length is to the right of where the start point is
  -- width is in front of me
  -- Height is how many blocks tall to make it
  local remainingHeight = theight
  local forwardPass = true

  while remainingHeight > 0 do
    print("Remaining Height: "..remainingHeight)
    -- Still got some chamber to work on
    -- If it's more than 3, we can add two to current and dig up/down
    -- if it's 2 we can add one to current and dig one up
    -- if it's 1 we can add zero and dig up
    local passHeight 
    if remainingHeight >= 3 then
      passHeight = 3
    else
      passHeight = remainingHeight % 3
    end
    local passLength = 0
    local passWidth = 0
    -- Take away how tall we're going to dig
    remainingHeight = remainingHeight - passHeight

    print("Pass Height: " .. passHeight)
    --Set up start position
    -- First pass height is wrong...
    if passHeight == 3 then
      sdig.mineUp()
      sdig.mineUp()
    elseif passHeight == 2 then
      sdig.mineUp()
    end
    -- Ready to start digging this chamber

    -- We'll always mine up, we might mine forward and down as well
    -- Can probably just call the operations, the detect won't find anything

    while passWidth < twidth do
      passWidth = passWidth + 1
      print("PassWidth: ".. passWidth)
      local right = false
      if passWidth % 2 == 1 then
        right = true
      end
      if not forwardPass then
        right = not right
      end

      if right then
        print("turning Right")
        turtle.turnRight()
      else
        print("turning Left")
        turtle.turnLeft()
      end

      while passLength < tlength do
        passLength = passLength + 1
        print("PassLength: " .. passLength)
        if passHeight == 3 then
          sdig.digUp()
          sdig.digDown()
        else
          sdig.digUp()
        end
        -- Since I'm in the column, if I need to dig one more, then do it
        if passLength < tlength then
          sdig.mineFwd()
        end
      end
      --
      -- Face forward for the next row
      if right then
        print("turning left (END)")
        turtle.turnLeft()
      else
        print("turning right (END)")
        turtle.turnRight()
      end
      -- Done with pass, where am I?
      passLength = 0 --reset for next pass
      -- move into the next row to work on it
      -- But only if we've got another row
      if passWidth < twidth then
        sdig.mineFwd()
      end
    end --width loop
    --Reset width for another height pass?
    passWidth = 0

    --turn around completely...
    turtle.turnLeft()
    turtle.turnLeft()
    -- Position yourself at the top of what you dug out to begin another pass
    local upCount = passHeight - 1
    while upCount > 0 do
      upCount = upCount - 1
      turtle.up()
    end
    -- Now it's the opposite of what our pass was the first time
    forwardPass = not forwardPass
  end --height loop
end

print("Making entry tunnel " .. args[4] .. " long")
entryTunnel(tonumber(args[4]))
print("Headed to start of chamber location")
chamberStartPoint(tonumber(args[1]))
print("Makin chamber!")
digChamber(tonumber(args[1]), tonumber(args[2]), tonumber(args[3]))
print("OMG DONE COME FIND ME")

-- vim: set filetype=lua :
